###############################################################################
# Snakefile
#
# Author: dakota.s.murray@gmail.com
#
# Run with the Snakemake workflow automation tool
###############################################################################

###############################################################################
# Imports
###############################################################################
from os.path import join as osjoin
import pandas as pd

###############################################################################
# Folders
###############################################################################
# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'Data')
FIGURE_DIR = osjoin(PROJ_HOME, 'Figures')
RAW_DATA_DIR = osjoin(DATA_DIR, 'Raw')
ADDITIONAL_DATA_DIR = osjoin(DATA_DIR, 'Additional')
DERIVED_DATA_DIR = osjoin(DATA_DIR, 'Derived')
DESCRIPTIVE_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Descriptive')
SENTENCES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Sentences')
TRAJECTORY_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Trajectories')
EMBEDDINGS_DIR = osjoin(DERIVED_DATA_DIR, 'Embeddings')
STAT_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Stat')
NETWORK_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Network')
UMAP_FIGURE_DIR = osjoin(FIGURE_DIR, 'UMAP')
MATH_FIGURE_DIR = osjoin(FIGURE_DIR, 'Math')
DESCRIPTIVE_FIG_DIR = osjoin(FIGURE_DIR, 'Descriptive')
AXES_DATA_DIR = osjoin(ADDITIONAL_DATA_DIR, 'OrgAxes')
SEMAXIS_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'SemAxis')
SEMAXIS_FIG_DIR = osjoin(FIGURE_DIR, 'SemAxis')

###############################################################################
# Data Files
###############################################################################

############
# Raw data #
############
MOBILITY_RAW = osjoin(RAW_DATA_DIR, '2008-2019_transitions.txt')
MOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'mobile_researcher_trajectories.txt')
NONMOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'nonmobile_researcher_trajectories.txt')
MOBILITY_TRAJECTORIES_YEARLY = osjoin(RAW_DATA_DIR, 'yearly', '{traj}', '{year}_{traj}_raw_mobility.csv')
ORG_SIZES = osjoin(RAW_DATA_DIR, '2008-2019_inst_sizes.txt')
ORG_STATE_NAMES = osjoin(ADDITIONAL_DATA_DIR, 'org_states.csv')
US_CENSUS_REGIONS = osjoin(ADDITIONAL_DATA_DIR, 'usa_states_to_regions.csv')

######################
# Mobility sentences #
######################
MOBILITY_TRAJECTORIES = osjoin(TRAJECTORY_DATA_DIR, '{traj}_mobility_trajectories.txt')
MOBILITY_SENTENCES = osjoin(SENTENCES_DATA_DIR, '{traj}', '{year}_{traj}_org_sentences.csv')

####################
# Descriptive Data #
####################
ORGANIZATION_FLOWS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{traj}_organization_flows.csv')
ORG_GEO_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_geographic_distane.csv')
AGGREGATE_ORG_DISTANCES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'aggregate', '{traj}', 'aggregate_org_distances_{traj}_d{dimensions}_ws{window}.csv')
RESEARCHER_META = osjoin(DESCRIPTIVE_DATA_DIR, 'researcher', '{traj}_researcher_metadata.txt')
ORG_META = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{traj}_org_metadata.txt')

####################
# Network Data #
####################
FLOWS_NETWORK = osjoin(NETWORK_DATA_DIR, 'flows_edgelist.csv')

##############
# Embeddings #
##############
WORD2VEC_EMBEDDINGS = osjoin(EMBEDDINGS_DIR, '{traj}', 'word2vec_d{dimensions}_ws{window}_model.bin')
ORG_W2V_COS_SIMS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'word2vec', 'cos_{traj}_d{dimensions}_ws{window}_sim.csv')
ORG_W2V_DOT_SIMS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'word2vec', 'dot_{traj}_d{dimensions}_ws{window}_sim.csv')
ORG_W2V_FACTORS = osjoin(EMBEDDINGS_DIR, '{traj}', 'factors', 'd{dimensions}_ws{window}_{traj}_w2vfactors.csv')

##############
# Stat       #
##############
AGGREGATE_R2 = osjoin(STAT_DATA_DIR, 'aggregate_r2.csv')
PREDICTED_VS_ACTUAL = osjoin(STAT_DATA_DIR, '{traj}', '{distance}', '{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.csv')
AGGREGATE_SLOPES = osjoin(STAT_DATA_DIR, 'aggregate_slopes.csv')

##############
# SemAxis    #
##############
COASTS_AXIS_ORGS = osjoin(AXES_DATA_DIR, 'coasts_axis_n{numorgs}.csv')
PRESTIGE_AXIS_ORGS = osjoin(AXES_DATA_DIR, '{ranking}_axis_n{numorgs}.csv')

# Projection data
COASTS_AXIS_PROJECTIONS = osjoin(SEMAXIS_DATA_DIR, '{traj}', 'geography', 'coasts_d{dimensions}_ws{window}_n{numorgs}_semaxis.csv')
PRESTIGE_AXIS_PROJECTIONS = osjoin(SEMAXIS_DATA_DIR, '{traj}', 'prestige', '{ranking}_d{dimensions}_ws{window}_n{numorgs}_{traj}_semaxis.csv')

# Aggregate Ranking Tests
PRESTIGE_AGGREGATE_RANK_COR = osjoin(SEMAXIS_DATA_DIR, 'prestige_aggregate_correlations.csv')

##################
# Metadata files #
##################
ORG_SCALES = osjoin(ADDITIONAL_DATA_DIR, 'org_to_scales.txt')
ORG_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, '20191024_institution_lookup.txt')
ORG_FIXED_COORDINATES = osjoin(ADDITIONAL_DATA_DIR, 'fixed_org_coordinates.txt')
ORG_LOOKUP_FIXED = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_fixed.txt')
ORG_LOOKUP_WITH_STATES = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_with_states.txt')
COUNTRY_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, 'iso_to_country.txt')
TRAJ_PRECEDENCE = osjoin(ADDITIONAL_DATA_DIR, 'traj_precedence_rules.txt')
ORG_RANKINGS = osjoin(ADDITIONAL_DATA_DIR, '{ranking}_ranking.csv')
ORG_SHORT_LABELS = osjoin(ADDITIONAL_DATA_DIR, 'org_shortlabels.csv')
ORG_PPR_COS_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'ppr_cosine_with_0_9.csv')
ORG_PPR_JSD_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'ppr_jsd_with_0_9.csv')
ORG_TYPES = osjoin(ADDITIONAL_DATA_DIR, 'org_types.csv')
ORGS_TO_EXCLUDE = osjoin(ADDITIONAL_DATA_DIR, 'orgs_not_government.csv')

###############################################################################
# Visualization files
###############################################################################

# UMAP PLOTS
UMAP_DATA = osjoin(UMAP_FIGURE_DIR, '{traj}', '{country}', 'd{dimensions}', 'data', '{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_data.csv')
UMAP_VISUALIZATIONS_ORG = osjoin(UMAP_FIGURE_DIR, '{traj}', '{country}', 'd{dimensions}', '{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_vis.{ext}')

# MATH PLOTS
PULLING_FORCE_COMPARE_PLOT = osjoin(MATH_FIGURE_DIR, 'compare',
                                '{traj}_d{dimensions}_ws{window}_si_compare.pdf')

# GRAVITY PLOTS
GRAVITY_RELATIONSHIP_PLOT = osjoin(FIGURE_DIR, 'Gravity', '{traj}', 'd{dimensions}', '{distance}', '{geo_constraint}_gravity_d{dimensions}_ws{window}_{to_filter}.pdf')
DOT_COSINE_RELATIONSHIP_PLOT = osjoin(FIGURE_DIR, 'Math', '{traj}', 'd{dimensions}', 'd{dimensions}_ws{window}_dot_cosine.pdf')
PREDICTED_VS_ACTUAL_PLOT = osjoin(FIGURE_DIR, 'Predicted', '{traj}', '{model}', 'd{dimensions}', '{distance}', '{traj}_{model}_{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.pdf')
PREDICTED_VS_ACTUAL_PLOT_FILT = osjoin(FIGURE_DIR, 'Predicted', '{traj}', '{model}', 'filtered', 'd{dimensions}', '{distance}', '{traj}_{model}_{geo_constraint_filt}_{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.pdf')

# DESCRIPTIVE PLOTS
PUBS_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'pubs_over_time_plot.pdf')
PROP_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_over_time_plot.pdf')
PUBS_DISC_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'pubs_over_time_by_discipline_plot.pdf')
PROP_DISC_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_over_time_by_discipline_plot.pdf')
NUM_AFFILIATIONS_ECDF = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'num_affiliations_ecdf.pdf')
PROP_MOBILE_BY_COUNTRY = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_mobility_by_country.pdf')
PROP_ORG_COUNTRY_MOBILITY = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_org_country_mobility.pdf')
COUNTRY_MOBILITY_ECDF = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_country_mobility_ecdf.pdf')
COUNTRY_MOBILITY_DISTRIBUTION = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_country_mobility_distribution.pdf')

# SEMAXIS PLOTS
SEMAXIS_1D_COASTS_PLOT = osjoin(SEMAXIS_FIG_DIR, 'coasts', '{traj}', 'd{dimensions}', 'coasts_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_1D_PRESTIGE_PLOT = osjoin(SEMAXIS_FIG_DIR, 'prestige', '{traj}', 'd{dimensions}', '{ranking}_rank_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_2D_COASTS_PRESTIGE_OVERALL_PLOT = osjoin(SEMAXIS_FIG_DIR, '2d', '{traj}', 'd{dimensions}', 'ws{window}', 'overall_coasts_{ranking}_rank_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_2D_COASTS_PRESTIGE_STATE_PLOT = osjoin(SEMAXIS_FIG_DIR, '2d', '{traj}', 'd{dimensions}', 'ws{window}', 'states', '{state}_coasts_{ranking}_rank_2Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_2D_COASTS_PRESTIGE_SECTOR_PLOT = osjoin(SEMAXIS_FIG_DIR, '2d', '{traj}', 'd{dimensions}', 'ws{window}', 'sectors', '{sector}_coasts_{ranking}_rank_2Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_RANK_COMPARISON_PLOT = osjoin(SEMAXIS_FIG_DIR, 'compare', '{traj}', 'd{dimensions}', 'ws{window}', '{ranking}', 'n{numorgs}_{ranking}_semcompare_d{dimensions}_ws{window}.pdf')
TIMES_LEIDEN_COMPARE_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, 'times_leiden_compare.pdf')
RANK_CORRELATION_PLOT = osjoin(SEMAXIS_FIG_DIR, '{ranking}_prestige_rank_correlation.pdf')

# MISC PLOTS
HYPERPARAMETER_PERFORMANCE = osjoin(DESCRIPTIVE_FIG_DIR, 'hyperparameter_performance.pdf')
###############################################################################
# MISC files
###############################################################################
GRADIENT_LEGEND = osjoin(PROJ_HOME, "Assets", "gradient_legend.pdf")
ORG_LABEL_TABLE = osjoin(PROJ_HOME, "Assets", "org_label_table.txt")

###############################################################################
# Parameters
###############################################################################
ALL_YEARS = range(2008, 2019, 1)
FIG_EXTS = ['pdf', 'html']

TRAJECTORIES = ['precedence']

# RANKINGS
RANKINGS = ['times', 'leiden']
NUMORGS = list(range(5, 61, 5))
NUMORGS.extend([1, 2, 3, 4])

# WORD2VEC parameters
W2V_DIMENSIONS = [300]
W2V_WINDOW_SIZE = [1]
W2V_MIN_WORD_FREQ = 20
W2V_NUM_WORKERS = 4
W2V_ITERATIONS = 5

# UMAP parameters
COUNTRIES = ['all']
UMAP_METRICS = ['cosine']
UMAP_NEIGHBORS = [25]

# SEMAXIS PARAMS
US_STATES = ['California', 'New_York', 'Arizona', 'Connecticut',
             'Massachusetts', 'Florida', 'Texas', 'Illinois', 'Indiana',
             'Washington', 'Ohio', 'New_Jersey', 'Pennsylvania']

SECTORS = ['Teaching', 'Government', 'Institute']

# Gravity law parameters
TO_FILTER = ["filter"]
DISTANCE_PARAMS = ['geo', 'emb', 'pprcos', 'pprjsd', 'dot']
GEO_CONSTRAINTS = ['global',
                   'same-country',
                   'different-country']

GEO_CONSTRAINTS_FILT = ['same-country',
                        'different-country']

GRAVITY_MODEL_TYPES = ['exp', 'power']

###############################################################################
# Includes
###############################################################################

# Rules relating to general data processing
include: 'Snakefile_DataProcessing.smk'

# Rules relating to producing SemAxis results
include: 'Snakefile_SemAxis.smk'

# Rules relating to UMAP projections
include: 'Snakefile_UMAP.smk'

# Rules relating to Descriptive statsitics of the data
include: 'Snakefile_Descriptive.smk'

# Rules relating to gravity law, predictions, etc.
include: 'Snakefile_Gravity.smk'

# Rules relating to the math.
include: 'Snakefile_Math.smk'

###############################################################################
# TARGET RULE
###############################################################################
rule all:
    input:
        # W2V Factor files
        expand(ORG_W2V_FACTORS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),

        # UMAP projections
        expand(UMAP_VISUALIZATIONS_ORG,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               window = W2V_WINDOW_SIZE,
               country = 'all',
               ext = FIG_EXTS),

        # Math Plots
        expand(PULLING_FORCE_COMPARE_PLOT,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),

        # Gravity Law Plots
        expand(GRAVITY_RELATIONSHIP_PLOT,
               traj = TRAJECTORIES,
               to_filter = TO_FILTER,
               distance = DISTANCE_PARAMS,
               geo_constraint = GEO_CONSTRAINTS,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(DOT_COSINE_RELATIONSHIP_PLOT,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(PREDICTED_VS_ACTUAL_PLOT,
               traj = TRAJECTORIES,
               distance = DISTANCE_PARAMS,
               dimensions = W2V_DIMENSIONS,
               geo_constraint = GEO_CONSTRAINTS,
               window = W2V_WINDOW_SIZE,
               model = GRAVITY_MODEL_TYPES),
        expand(PREDICTED_VS_ACTUAL_PLOT_FILT,
               traj = TRAJECTORIES,
               distance = "emb",
               dimensions = W2V_DIMENSIONS,
               geo_constraint = "global",
               geo_constraint_filt = GEO_CONSTRAINTS_FILT,
               window = W2V_WINDOW_SIZE,
               model = GRAVITY_MODEL_TYPES),
        GRADIENT_LEGEND,
        AGGREGATE_SLOPES,

        # Descriptive Plots
        expand(PUBS_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PROP_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PUBS_DISC_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PROP_DISC_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(NUM_AFFILIATIONS_ECDF, traj = TRAJECTORIES),
        expand(PROP_MOBILE_BY_COUNTRY, traj = TRAJECTORIES),
        expand(PROP_ORG_COUNTRY_MOBILITY, traj = TRAJECTORIES),
        expand(COUNTRY_MOBILITY_ECDF, traj = TRAJECTORIES),
        expand(COUNTRY_MOBILITY_DISTRIBUTION, traj = TRAJECTORIES),
        HYPERPARAMETER_PERFORMANCE,
        TIMES_LEIDEN_COMPARE_PLOT,

        # SemAxis plots
        expand(SEMAXIS_1D_COASTS_PLOT,
               traj = TRAJECTORIES,
               numorgs = 20,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_1D_PRESTIGE_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_2D_COASTS_PRESTIGE_SECTOR_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               sector = SECTORS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_2D_COASTS_PRESTIGE_STATE_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               state = US_STATES,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_2D_COASTS_PRESTIGE_OVERALL_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_RANK_COMPARISON_PLOT,
               ranking = RANKINGS,
               numorgs = NUMORGS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(PRESTIGE_AGGREGATE_RANK_COR,
               ranking = RANKINGS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(RANK_CORRELATION_PLOT, ranking = RANKINGS),

        # Misc
        ORG_LABEL_TABLE
