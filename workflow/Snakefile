from os.path import join as osjoin
import pandas as pd

# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'Data')
FIGURE_DIR = osjoin(PROJ_HOME, 'Figures')
RAW_DATA_DIR = osjoin(DATA_DIR, 'Raw')
ADDITIONAL_DATA_DIR = osjoin(DATA_DIR, 'Additional')
DERIVED_DATA_DIR = osjoin(DATA_DIR, 'Derived')
DESCRIPTIVE_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Descriptive')
SENTENCES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Sentences')
EMBEDDINGS_DIR = osjoin(DERIVED_DATA_DIR, 'Embeddings')
STAT_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Stat')
UMAP_FIGURE_DIR = osjoin(FIGURE_DIR, 'UMAP')

############
# Raw data #
############
MOBILITY_RAW = osjoin(RAW_DATA_DIR, '2008-2019_transitions.txt')
MOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'mobile_researcher_trajectories.txt')
NONMOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'nonmobile_researcher_trajectories.txt')
MOBILITY_RAW_YEARLY = osjoin(RAW_DATA_DIR, 'yearly', '{year}_raw_mobility.csv')
ORG_SIZES = osjoin(RAW_DATA_DIR, '2008-2019_inst_sizes.txt')
ORG_STATE_NAMES = osjoin(ADDITIONAL_DATA_DIR, 'org_states.csv')

######################
# Mobility sentences #
######################
MOBILITY_SENTENCES = osjoin(SENTENCES_DATA_DIR, '{year}_org_sentences.csv')

####################
# Descriptive Data #
####################
ORGANIZATION_FLOWS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_flows.csv')
ORG_GEO_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_geographic_distance.csv')
AGGREGATE_ORG_DISTANCES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{period}_aggregate_org_distances_d{dimensions}_ws{window}.csv')
RESEARCHER_META = osjoin(DESCRIPTIVE_DATA_DIR, 'researcher', 'researcher_metadata.txt')
ORG_META = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'org_metadata.txt')

##############
# Embeddings #
##############
WORD2VEC_EMBEDDINGS = osjoin(EMBEDDINGS_DIR, 'word2vec', '{period}_word2vec_d{dimensions}_ws{window}_model.bin')
ORG_W2V_SIMILARITIES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{period}_word2vec_d{dimensions}_ws{window}_sim.csv')

##############
# Stat       #
##############
AGGREGATE_R2 = osjoin(STAT_DATA_DIR, 'aggregate_r2.csv')
PREDICTED_VS_ACTUAL = osjoin(STAT_DATA_DIR, '{distance}_{geo_constraint}_{period}_predicted_vs_actual_d{dimensions}_ws{window}.csv')

##################
# Visualizations #
##################
UMAP_DATA = osjoin(UMAP_FIGURE_DIR, '{country}', 'd{dimensions}', 'data', '{period}_{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_data.csv')
UMAP_VISUALIZATIONS_ORG = osjoin(UMAP_FIGURE_DIR, '{country}', 'd{dimensions}', '{period}_{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_vis.{ext}')
GRAVITY_RELATIONSHIP_PLOT = osjoin(FIGURE_DIR, 'Gravity', 'd{dimensions}', '{distance}', '{period}_gravity_d{dimensions}_ws{window}_{to_filter}_{geo_constraint}.pdf')
PUBS_OVER_TIME_PLOT = osjoin(FIGURE_DIR, 'Descriptive', 'pubs_over_time_plot.pdf')
PUBS_DISC_OVER_TIME_PLOT = osjoin(FIGURE_DIR, 'Descriptive', 'pubs_over_time_by_discipline_plot.pdf')
NUM_AFFILIATIONS_ECDF = osjoin(FIGURE_DIR, 'Descriptive', 'num_affiliations_ecdf.pdf')
PROP_MOBILE_BY_COUNTRY = osjoin(FIGURE_DIR, 'Descriptive', 'prop_mobility_by_country.pdf')
PROP_ORG_COUNTRY_MOBILITY = osjoin(FIGURE_DIR, 'Descriptive', 'prop_org_country_mobility.pdf')
COUNTRY_MOBILITY_ECDF = osjoin(FIGURE_DIR, 'Descriptive', 'prop_country_mobility_ecdf.pdf')
COUNTRY_MOBILITY_DISTRIBUTION = osjoin(FIGURE_DIR, 'Descriptive', 'prop_country_mobility_distribution.pdf')

##################
# Metadata files #
##################
ORG_SCALES = osjoin(ADDITIONAL_DATA_DIR, 'org_to_scales.txt')
ORG_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, '20191024_institution_lookup.txt')
ORG_FIXED_COORDINATES = osjoin(ADDITIONAL_DATA_DIR, 'fixed_org_coordinates.txt')
ORG_LOOKUP_FIXED = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_fixed.txt')
ORG_LOOKUP_WITH_STATES = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_with_states.txt')
COUNTRY_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, 'iso_to_country.txt')

##############
# Parameters #
##############
ALL_YEARS = range(2008, 2019, 1)
PERIODS = ['2008-2019']
FIG_EXTS = ['pdf', 'html']

# WORD2VEC parameters
W2V_DIMENSIONS = [200]
W2V_WINDOW_SIZE = [2, 5]
W2V_MIN_WORD_FREQ = 50
W2V_NUM_WORKERS = 4
W2V_ITERATIONS = 5

# UMAP parameters
COUNTRIES = ['all', 'USA']
UMAP_METRICS = ['cosine']
UMAP_NEIGHBORS = [25]

# Gravity law parameters
TO_FILTER = ["filter"]
DISTANCE_PARAMS = ['geo', 'emb']
GEO_CONSTRAINTS = ['global',
                   'same-country',
                   'different-country']

def get_sentences_for_period(params):
    period_split = params.period.split("-")
    period_years = range(int(period_split[0]), int(period_split[1]) + 1, 1)
    return(expand(MOBILITY_SENTENCES, year = period_years))

###############################################################################
# TARGET RULE
###############################################################################
rule all:
    input:
        ORG_LOOKUP_WITH_STATES,
        RESEARCHER_META,
        ORG_META,
        NONMOBILE_RESEARCHERS,
        expand(WORD2VEC_EMBEDDINGS,
               period = PERIODS,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(ORG_W2V_SIMILARITIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE,
               period = PERIODS),
        expand(AGGREGATE_ORG_DISTANCES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE,
               period = PERIODS),
        expand(UMAP_DATA,
               period = PERIODS,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               country = COUNTRIES),
        expand(UMAP_VISUALIZATIONS_ORG,
               dimensions = W2V_DIMENSIONS,
               period = PERIODS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               window = W2V_WINDOW_SIZE,
               country = 'all',
               ext = FIG_EXTS),
        expand(GRAVITY_RELATIONSHIP_PLOT,
               to_filter = TO_FILTER,
               distance = DISTANCE_PARAMS,
               geo_constraint = GEO_CONSTRAINTS,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE,
               period = PERIODS),
        expand(PREDICTED_VS_ACTUAL,
                distance = DISTANCE_PARAMS,
                dimensions = W2V_DIMENSIONS,
                geo_constraint = GEO_CONSTRAINTS,
                window = W2V_WINDOW_SIZE,
                period = PERIODS),
        PUBS_OVER_TIME_PLOT,
        NUM_AFFILIATIONS_ECDF,
        PROP_MOBILE_BY_COUNTRY,
        PROP_ORG_COUNTRY_MOBILITY,
        COUNTRY_MOBILITY_ECDF,
        COUNTRY_MOBILITY_DISTRIBUTION,
        AGGREGATE_R2


rule fix_org_coordinates:
    input: ORG_LOOKUP
    params: fixed = ORG_FIXED_COORDINATES
    output: ORG_LOOKUP_FIXED
    shell:
        "Rscript scripts/FixOrgCoordinates.R --lookup {input} \
        --coordinates {params.fixed} --output {output}"

rule lookup_state_from_coords:
    input: rules.fix_org_coordinates.output
    output: ORG_STATE_NAMES
    shell:
        "python scripts/lookup_state_from_coords.py --input {input} --sleep 1.1 --output {output}"

rule add_state_to_lookup:
    input: coords = rules.fix_org_coordinates.output,
           states = rules.lookup_state_from_coords.output
    output: ORG_LOOKUP_WITH_STATES
    shell:
        "Rscript scripts/AddStatesToLookup.R --lookup {input.coords} --output {output} \
                 --states {input.states}"

rule get_researcher_metadata:
    input: raw = MOBILITY_RAW,
           lookup = rules.add_state_to_lookup.output
    output: RESEARCHER_META
    shell:
        "Rscript scripts/GetResearcherMetadata.R --input {input.raw} \
                --lookup {input.lookup} --output {output}"

rule get_org_metadata:
    input:
        raw = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output,
        lookup = rules.add_state_to_lookup.output
    output: ORG_META
    shell:
        "Rscript scripts/GetOrgMetadata.R --input {input.raw} --lookup {input.lookup} \
                --researchers {input.researchers} --output {output}"

rule filter_to_mobile:
    input:
        raw = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output
    output: MOBILE_RESEARCHERS
    shell:
        "Rscript scripts/FilterRawByMobilityStatus.R --input {input.raw} \
        --researchers {input.researchers} --output {output} --mobile"

rule filter_to_nonmobile:
    input:
        raw = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output
    output: NONMOBILE_RESEARCHERS
    shell:
        "Rscript scripts/FilterRawByMobilityStatus.R --input {input.raw} \
        --researchers {input.researchers} --output {output} --nonmobile"

rule dissagregate_pubs_to_yearly:
    input: rules.filter_to_mobile.output
    output: MOBILITY_RAW_YEARLY
    shell: "Rscript scripts/FilterRawMobilityToSingleYear.R {input} {wildcards.year} {output}"

rule pubs_to_sentences:
    input: rules.dissagregate_pubs_to_yearly.output
    output: MOBILITY_SENTENCES
    shell:
        "Rscript scripts/FormatPubsToSentences.R {input} org {output}"

rule train_word2vec_model:
    input: get_sentences_for_period
    output: WORD2VEC_EMBEDDINGS
    threads: W2V_NUM_WORKERS
    params:
        wf = W2V_MIN_WORD_FREQ,
        nw = W2V_NUM_WORKERS,
        niter = W2V_ITERATIONS
    shell:
        "python scripts/train_word2vec_embedding_from_sentences.py --files {input} \
                --dimensions {wildcards.dimensions} --window {wildcards.window} \
                --minfrequency {params.wf} --numworkers {params.nw} \
                --iterations {params.niter} --output {output}"

rule dimreduce_umap:
    input: model = rules.train_word2vec_model.output,
           lookup = rules.add_state_to_lookup.output
    output: UMAP_DATA
    shell:
        'python scripts/dimreduce_with_umap.py --model {input.model} \
                --metric {wildcards.metric} --neighbors {wildcards.neighbors} \
                --mindistance 0.1 --country {wildcards.country} \
                --lookup {input.lookup} --output {output}'

rule plot_umap_org:
    input: rules.dimreduce_umap.output
    params:
        orgs = rules.add_state_to_lookup.output,
        countries = COUNTRY_LOOKUP
    output: UMAP_VISUALIZATIONS_ORG
    shell:
        "Rscript scripts/PlotOrgDimReducedEmbedding.R {input} {params.orgs} \
        {params.countries} {output}"

rule calculate_org_flows:
    input: rules.filter_to_mobile.output
    output: ORGANIZATION_FLOWS
    shell:
        "python scripts/calculate_org_flows.py --input {input} --output {output}"

rule calculate_org_geographic_distance:
    input: rules.add_state_to_lookup.output
    output: ORG_GEO_DISTANCE
    shell:
        "python scripts/calculate_org_geo_distance.py --input {input} --output {output}"


rule calculate_org_w2v_similarities:
    input: rules.train_word2vec_model.output
    output: ORG_W2V_SIMILARITIES
    shell:
        "python scripts/calculate_org_w2v_similarity.py --model {input} --output {output}"

rule build_aggregate_org_distances:
    input: flows = rules.calculate_org_flows.output,
           geo = rules.calculate_org_geographic_distance.output,
           emb = rules.calculate_org_w2v_similarities.output,
           orgs = rules.add_state_to_lookup.output
    params:
        sizes = ORG_SIZES,
    # This can eat up a lot of memory which is a problem when running paralell.
    # Set a maximum, say 2.5-gb
    resources:
        mem_mb = 3000
    output: AGGREGATE_ORG_DISTANCES
    shell:
        "Rscript scripts/BuildAggregateDistanceFile.R --sizes {params.sizes} \
                 --flows {input.flows} --geo {input.geo} --emb {input.emb} \
                 --orgs {input.orgs} --out {output}"

rule get_aggregate_gravity_r2:
    input:
        [expand(rules.build_aggregate_org_distances.output,
                dimensions = W2V_DIMENSIONS,
                window = W2V_WINDOW_SIZE,
                period = PERIODS)]
    threads: 4
    output: AGGREGATE_R2
    shell:
        # using default argument parsing here
        "Rscript scripts/GetAggregateGravityR2.R {input} {output}"

rule calculate_predicted_vs_actual:
    input: rules.build_aggregate_org_distances.output,
    output: PREDICTED_VS_ACTUAL,
    shell:
        "Rscript scripts/CalculatePredictedVsActual.R --input {input} \
        --output {output} --geo {wildcards.geo_constraint} \
        --distance {wildcards.distance}"


rule plot_gravity_relationship:
    input: rules.build_aggregate_org_distances.output
    output: GRAVITY_RELATIONSHIP_PLOT
    params:
        filterflag = lambda w: '--{}'.format(w.to_filter)
    shell:
        "Rscript scripts/PlotGravityLawRelationship.R --input {input} \
                 --output {output} --geo {wildcards.geo_constraint} \
                 --distance {wildcards.distance} {params.filterflag} --showcoef"

## Descriptive plots
rule plot_pubs_over_time:
    input:
        flows = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output
    output:
        PUBS_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPubsOverTime.R --input {input.flows} \
                 --researchers {input.researchers} --output {output}"

rule plot_pubs_over_time_by_discipline:
    input: rules.filter_to_mobile.output
    output: PUBS_DISC_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPubsOverTimeByDiscipline.R --input {input} \
                 --output {output}"

rule plot_num_affiliations_ecdf:
    input: rules.get_researcher_metadata.output
    output: NUM_AFFILIATIONS_ECDF
    shell:
        "Rscript scripts/PlotMobilityECDF.R --input {input} \
                 --output {output}"

rule plot_prop_mobile_by_country:
    input:
        flows = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output,
        lookup = rules.add_state_to_lookup.output
    output: PROP_MOBILE_BY_COUNTRY
    shell:
        "Rscript scripts/PlotProportionMobilityByCountry.R --flows {input.flows}\
                 --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_org_country_mobility:
    input:
        flows = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output,
        lookup = rules.add_state_to_lookup.output
    output: PROP_ORG_COUNTRY_MOBILITY
    shell:
        "Rscript scripts/PlotOrgCountryMobility.R --flows {input.flows}\
                 --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_country_mobility_ecdf:
    input:
        flows = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output,
        lookup = rules.add_state_to_lookup.output
    output: COUNTRY_MOBILITY_ECDF
    shell:
        "Rscript scripts/PlotCountryMobilityECDF.R --flows {input.flows}\
                 --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_country_mobility_distribution:
    input:
        flows = MOBILITY_RAW,
        researchers = rules.get_researcher_metadata.output,
        lookup = rules.add_state_to_lookup.output
    output: COUNTRY_MOBILITY_DISTRIBUTION
    shell:
        "Rscript scripts/PlotCountryMobilityDistribution.R --flows {input.flows}\
                 --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"
