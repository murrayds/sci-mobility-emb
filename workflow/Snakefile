from os.path import join as osjoin
import pandas as pd

# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'Data')
FIGURE_DIR = osjoin(PROJ_HOME, 'Figures')
RAW_DATA_DIR = osjoin(DATA_DIR, 'Raw')
ADDITIONAL_DATA_DIR = osjoin(DATA_DIR, 'Additional')
DERIVED_DATA_DIR = osjoin(DATA_DIR, 'Derived')
DESCRIPTIVE_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Descriptive')
SENTENCES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Sentences')
TRAJECTORY_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Trajectories')
EMBEDDINGS_DIR = osjoin(DERIVED_DATA_DIR, 'Embeddings')
STAT_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Stat')
NETWORK_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Network')
UMAP_FIGURE_DIR = osjoin(FIGURE_DIR, 'UMAP')
DESCRIPTIVE_FIG_DIR = osjoin(FIGURE_DIR, 'Descriptive')
AXES_DATA_DIR = osjoin(ADDITIONAL_DATA_DIR, 'OrgAxes')
SEMAXIS_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'SemAxis')
SEMAXIS_FIG_DIR = osjoin(FIGURE_DIR, 'SemAxis')

############
# Raw data #
############
MOBILITY_RAW = osjoin(RAW_DATA_DIR, '2008-2019_transitions.txt')
MOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'mobile_researcher_trajectories.txt')
NONMOBILE_RESEARCHERS = osjoin(RAW_DATA_DIR, 'nonmobile_researcher_trajectories.txt')
MOBILITY_TRAJECTORIES_YEARLY = osjoin(RAW_DATA_DIR, 'yearly', '{traj}', '{year}_{traj}_raw_mobility.csv')
ORG_SIZES = osjoin(RAW_DATA_DIR, '2008-2019_inst_sizes.txt')
ORG_STATE_NAMES = osjoin(ADDITIONAL_DATA_DIR, 'org_states.csv')
US_CENSUS_REGIONS = osjoin(ADDITIONAL_DATA_DIR, 'usa_states_to_regions.csv')

######################
# Mobility sentences #
######################
MOBILITY_TRAJECTORIES = osjoin(TRAJECTORY_DATA_DIR, '{traj}_mobility_trajectories.txt')
MOBILITY_SENTENCES = osjoin(SENTENCES_DATA_DIR, '{traj}', '{year}_{traj}_org_sentences.csv')

####################
# Descriptive Data #
####################
ORGANIZATION_FLOWS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{traj}_organization_flows.csv')
ORG_GEO_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_geographic_distancesv')
AGGREGATE_ORG_DISTANCES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'aggregate', '{traj}', 'aggregate_org_distances_{traj}_d{dimensions}_ws{window}.csv')
RESEARCHER_META = osjoin(DESCRIPTIVE_DATA_DIR, 'researcher', '{traj}_researcher_metadata.txt')
ORG_META = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{traj}_org_metadata.txt')

####################
# Network Data #
####################
FLOWS_NETWORK = osjoin(NETWORK_DATA_DIR, 'flows_edgelist.csv')

##############
# Embeddings #
##############
WORD2VEC_EMBEDDINGS = osjoin(EMBEDDINGS_DIR, '{traj}', 'word2vec_d{dimensions}_ws{window}_model.bin')
ORG_W2V_SIMILARITIES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'word2vec', '{traj}_d{dimensions}_ws{window}_sim.csv')

##############
# Stat       #
##############
AGGREGATE_R2 = osjoin(STAT_DATA_DIR, 'aggregate_r2.csv')
PREDICTED_VS_ACTUAL = osjoin(STAT_DATA_DIR, '{traj}', '{distance}', '{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.csv')

##############
# Axes       #
##############
COASTS_AXIS_ORGS = osjoin(AXES_DATA_DIR, 'coasts_axis_n{numorgs}.csv')
PRESTIGE_AXIS_ORGS = osjoin(AXES_DATA_DIR, '{ranking}_axis_n{numorgs}.csv')

# Projection data
COASTS_AXIS_PROJECTIONS = osjoin(SEMAXIS_DATA_DIR, '{traj}', 'geography', 'coasts_d{dimensions}_ws{window}_n{numorgs}_semaxis.csv')
PRESTIGE_AXIS_PROJECTIONS = osjoin(SEMAXIS_DATA_DIR, '{traj}', 'prestige', '{ranking}_d{dimensions}_ws{window}_n{numorgs}_{traj}_semaxis.csv')

# Aggregate Ranking Tests
PRESTIGE_AGGREGATE_RANK_COR = osjoin(SEMAXIS_DATA_DIR, '{traj}', 'prestige_aggregate_correlations.csv')

##################
# Visualizations #
##################
UMAP_DATA = osjoin(UMAP_FIGURE_DIR, '{traj}', '{country}', 'd{dimensions}', 'data', '{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_data.csv')
UMAP_VISUALIZATIONS_ORG = osjoin(UMAP_FIGURE_DIR, '{traj}', '{country}', 'd{dimensions}', '{country}_umap_d{dimensions}_ws{window}_{metric}_neighbors{neighbors}_vis.{ext}')
GRAVITY_RELATIONSHIP_PLOT = osjoin(FIGURE_DIR, 'Gravity', '{traj}', 'd{dimensions}', '{distance}', '{geo_constraint}_gravity_d{dimensions}_ws{window}_{to_filter}.pdf')
PREDICTED_VS_ACTUAL_PLOT = osjoin(FIGURE_DIR, 'Predicted', '{traj}', 'd{dimensions}', '{distance}', '{traj}_{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.pdf')
PREDICTED_VS_ACTUAL_PLOT_FILT = osjoin(FIGURE_DIR, 'Predicted', '{traj}', 'filtered', 'd{dimensions}', '{distance}', '{traj}_{geo_constraint_filt}_{geo_constraint}_predicted_vs_actual_d{dimensions}_ws{window}.pdf')
GRADIENT_LEGEND = osjoin(PROJ_HOME, "Assets", "gradient_legend.pdf")
PUBS_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'pubs_over_time_plot.pdf')
PROP_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_over_time_plot.pdf')
PUBS_DISC_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'pubs_over_time_by_discipline_plot.pdf')
PROP_DISC_OVER_TIME_PLOT = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_over_time_by_discipline_plot.pdf')
NUM_AFFILIATIONS_ECDF = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'num_affiliations_ecdf.pdf')
PROP_MOBILE_BY_COUNTRY = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_mobility_by_country.pdf')
PROP_ORG_COUNTRY_MOBILITY = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_org_country_mobility.pdf')
COUNTRY_MOBILITY_ECDF = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_country_mobility_ecdf.pdf')
COUNTRY_MOBILITY_DISTRIBUTION = osjoin(DESCRIPTIVE_FIG_DIR, '{traj}', 'prop_country_mobility_distribution.pdf')
HYPERPARAMETER_PERFORMANCE = osjoin(DESCRIPTIVE_FIG_DIR, 'hyperparameter_performance.pdf')
SEMAXIS_1D_COASTS_PLOT = osjoin(SEMAXIS_FIG_DIR, 'coasts', '{traj}', 'd{dimensions}', 'coasts_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_1D_PRESTIGE_PLOT = osjoin(SEMAXIS_FIG_DIR, 'prestige', '{traj}', 'd{dimensions}', '{ranking}_rank_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')
SEMAXIS_2D_COASTS_PRESTIGE_PLOT = osjoin(SEMAXIS_FIG_DIR, '2d', '{traj}', 'd{dimensions}', 'coasts_{ranking}_rank_1Dsemaxis_d{dimensions}_ws{window}_n{numorgs}.pdf')

##################
# Metadata files #
##################
ORG_SCALES = osjoin(ADDITIONAL_DATA_DIR, 'org_to_scales.txt')
ORG_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, '20191024_institution_lookup.txt')
ORG_FIXED_COORDINATES = osjoin(ADDITIONAL_DATA_DIR, 'fixed_org_coordinates.txt')
ORG_LOOKUP_FIXED = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_fixed.txt')
ORG_LOOKUP_WITH_STATES = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_with_states.txt')
COUNTRY_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, 'iso_to_country.txt')
TRAJ_PRECEDENCE = osjoin(ADDITIONAL_DATA_DIR, 'traj_precedence_rules.txt')
ORG_RANKINGS = osjoin(ADDITIONAL_DATA_DIR, '{ranking}_ranking.csv')
ORG_SHORT_LABELS = osjoin(ADDITIONAL_DATA_DIR, 'org_shortlabels.csv')

##############
# Parameters #
##############
ALL_YEARS = range(2008, 2019, 1)
FIG_EXTS = ['pdf', 'html']

TRAJECTORIES = ['precedence']

# RANKINGS
RANKINGS = ['times', 'leiden']
NUMORGS = list(range(5, 61, 5))
NUMORGS.insert(0, 1)

# WORD2VEC parameters
W2V_DIMENSIONS = [100, 200, 300]
W2V_WINDOW_SIZE = [1, 2, 3]
W2V_MIN_WORD_FREQ = 20
W2V_NUM_WORKERS = 4
W2V_ITERATIONS = 5

# UMAP parameters
COUNTRIES = ['all']
UMAP_METRICS = ['cosine']
UMAP_NEIGHBORS = [25]

# Gravity law parameters
TO_FILTER = ["filter"]
DISTANCE_PARAMS = ['geo', 'emb']
GEO_CONSTRAINTS = ['global',
                   'same-country',
                   'different-country']

GEO_CONSTRAINTS_FILT = ['same-country',
                        'different-country']

###############################################################################
# TARGET RULE
###############################################################################
rule all:
    input:
        expand(WORD2VEC_EMBEDDINGS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(ORG_W2V_SIMILARITIES,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(AGGREGATE_ORG_DISTANCES,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(UMAP_DATA,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               country = COUNTRIES),
        expand(UMAP_VISUALIZATIONS_ORG,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               window = W2V_WINDOW_SIZE,
               country = 'all',
               ext = FIG_EXTS),
        expand(GRAVITY_RELATIONSHIP_PLOT,
               traj = TRAJECTORIES,
               to_filter = TO_FILTER,
               distance = DISTANCE_PARAMS,
               geo_constraint = GEO_CONSTRAINTS,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(PREDICTED_VS_ACTUAL,
                traj = TRAJECTORIES,
                distance = DISTANCE_PARAMS,
                dimensions = W2V_DIMENSIONS,
                geo_constraint = GEO_CONSTRAINTS,
                window = W2V_WINDOW_SIZE),
        expand(PREDICTED_VS_ACTUAL_PLOT,
               traj = TRAJECTORIES,
               distance = DISTANCE_PARAMS,
               dimensions = W2V_DIMENSIONS,
               geo_constraint = GEO_CONSTRAINTS,
               window = W2V_WINDOW_SIZE),
        expand(PREDICTED_VS_ACTUAL_PLOT_FILT,
               traj = TRAJECTORIES,
               distance = "emb",
               dimensions = W2V_DIMENSIONS,
               geo_constraint = "global",
               geo_constraint_filt = GEO_CONSTRAINTS_FILT,
               window = W2V_WINDOW_SIZE),
        GRADIENT_LEGEND,
        # Descriptive Plots
        expand(PUBS_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PROP_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PUBS_DISC_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(PROP_DISC_OVER_TIME_PLOT, traj = TRAJECTORIES),
        expand(NUM_AFFILIATIONS_ECDF, traj = TRAJECTORIES),
        expand(PROP_MOBILE_BY_COUNTRY, traj = TRAJECTORIES),
        expand(PROP_ORG_COUNTRY_MOBILITY, traj = TRAJECTORIES),
        expand(COUNTRY_MOBILITY_ECDF, traj = TRAJECTORIES),
        expand(COUNTRY_MOBILITY_DISTRIBUTION, traj = TRAJECTORIES),
        HYPERPARAMETER_PERFORMANCE,
        expand(PRESTIGE_AXIS_ORGS,
               ranking = RANKINGS,
               numorgs = NUMORGS),
        expand(COASTS_AXIS_ORGS, numorgs = 20),
        expand(COASTS_AXIS_PROJECTIONS,
               traj = TRAJECTORIES,
               numorgs = 20,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(PRESTIGE_AXIS_PROJECTIONS,
               ranking = RANKINGS,
               numorgs = NUMORGS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_1D_COASTS_PLOT,
               traj = TRAJECTORIES,
               numorgs = 20,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_1D_PRESTIGE_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(SEMAXIS_2D_COASTS_PRESTIGE_PLOT,
               ranking = RANKINGS,
               numorgs = 20,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE),
        expand(PRESTIGE_AGGREGATE_RANK_COR,
               ranking = RANKINGS,
               traj = TRAJECTORIES,
               dimensions = W2V_DIMENSIONS,
               window = W2V_WINDOW_SIZE)

rule fix_org_coordinates:
    input: ORG_LOOKUP
    params: fixed = ORG_FIXED_COORDINATES
    output: ORG_LOOKUP_FIXED
    shell:
        "Rscript scripts/FixOrgCoordinates.R --lookup {input} \
        --coordinates {params.fixed} --output {output}"

rule lookup_state_from_coords:
    input: ancient(rules.fix_org_coordinates.output)
    output: ORG_STATE_NAMES
    shell:
        "python scripts/lookup_state_from_coords.py --input {input} --sleep 1.1 --output {output}"

rule add_state_to_lookup:
    input: coords = rules.fix_org_coordinates.output,
           states = ancient(rules.lookup_state_from_coords.output)
    output: ORG_LOOKUP_WITH_STATES
    shell:
        "Rscript scripts/AddStatesToLookup.R --lookup {input.coords} --output {output} \
                 --states {input.states}"

rule filter_to_mobile:
    input: MOBILITY_RAW
    output: MOBILE_RESEARCHERS
    shell:
        "Rscript scripts/FilterRawByMobilityStatus.R --input {input} \
        --output {output} --mobile"

rule filter_to_nonmobile:
    input: MOBILITY_RAW
    output: NONMOBILE_RESEARCHERS
    shell:
        "Rscript scripts/FilterRawByMobilityStatus.R --input {input} \
         --output {output} --nonmobile"

rule calculate_traj_precedence_rules:
    input: rules.filter_to_mobile.output
    output: TRAJ_PRECEDENCE
    shell:
        "Rscript scripts/CalculateTrajPrecedenceRules.R --input {input} \
        --output {output}"

rule format_trajectories:
    input:
        trajectories = rules.filter_to_mobile.output,
        precedence = rules.calculate_traj_precedence_rules.output
    output:
        MOBILITY_TRAJECTORIES
    shell:
        "Rscript scripts/FormatMobilityTrajectories.R --input {input.trajectories} \
        --output {output} --precedence {input.precedence} --traj {wildcards.traj}"

rule get_researcher_metadata:
    input: raw = rules.format_trajectories.output,
           nonmobile = rules.filter_to_nonmobile.output,
           lookup = ancient(rules.add_state_to_lookup.output)
    output: RESEARCHER_META
    shell:
        "Rscript scripts/GetResearcherMetadata.R --input {input.raw} \
                --nonmobile {input.nonmobile} --lookup {input.lookup} --output {output}"

rule get_org_metadata:
    input:
        raw = rules.format_trajectories.output,
        researchers = ancient(rules.get_researcher_metadata.output),
        lookup = ancient(rules.add_state_to_lookup.output)
    output: ORG_META
    shell:
        "Rscript scripts/GetOrgMetadata.R --input {input.raw} --lookup {input.lookup} \
                --researchers {input.researchers} --output {output}"

rule dissagregate_pubs_to_yearly:
    input: rules.format_trajectories.output
    output: MOBILITY_TRAJECTORIES_YEARLY
    shell: "Rscript scripts/FilterRawMobilityToSingleYear.R {input} {wildcards.year} {output}"

rule pubs_to_sentences:
    input: rules.dissagregate_pubs_to_yearly.output
    output: MOBILITY_SENTENCES
    shell:
        "Rscript scripts/FormatPubsToSentences.R {input} org {output}"

rule train_word2vec_model:
    input: [expand(MOBILITY_SENTENCES, traj = TRAJECTORIES, year = ALL_YEARS)]
    output: WORD2VEC_EMBEDDINGS
    threads: W2V_NUM_WORKERS
    params:
        wf = W2V_MIN_WORD_FREQ,
        nw = W2V_NUM_WORKERS,
        niter = W2V_ITERATIONS
    shell:
        "python scripts/train_word2vec_embedding_from_sentences.py --files {input} \
                --dimensions {wildcards.dimensions} --window {wildcards.window} \
                --minfrequency {params.wf} --numworkers {params.nw} \
                --iterations {params.niter} --output {output}"

rule dimreduce_umap:
    input: model = rules.train_word2vec_model.output,
           lookup = ancient(rules.add_state_to_lookup.output)
    output: UMAP_DATA
    shell:
        'python scripts/dimreduce_with_umap.py --model {input.model} \
                --metric {wildcards.metric} --neighbors {wildcards.neighbors} \
                --mindistance 0.1 --country {wildcards.country} \
                --lookup {input.lookup} --output {output}'

rule plot_umap_org:
    input: rules.dimreduce_umap.output
    params:
        orgs = ancient(rules.add_state_to_lookup.output),
        countries = COUNTRY_LOOKUP
    output: UMAP_VISUALIZATIONS_ORG
    shell:
        "Rscript scripts/PlotOrgDimReducedEmbedding.R {input} {params.orgs} \
        {params.countries} {output}"

rule calculate_org_flows:
    input: rules.format_trajectories.output
    output: ORGANIZATION_FLOWS
    shell:
        "python scripts/calculate_org_flows.py --input {input} --output {output}"

rule calculate_org_geographic_distance:
    input: ancient(rules.add_state_to_lookup.output)
    output: ORG_GEO_DISTANCE
    shell:
        "python scripts/calculate_org_geo_distance.py --input {input} --output {output}"

rule calculate_org_w2v_similarities:
    input: rules.train_word2vec_model.output
    output: ORG_W2V_SIMILARITIES
    shell:
        "python scripts/calculate_org_w2v_similarity.py --model {input} --output {output}"

rule build_aggregate_org_distances:
    input: flows = rules.calculate_org_flows.output,
           geo = ancient(rules.calculate_org_geographic_distance.output),
           emb = ancient(rules.calculate_org_w2v_similarities.output),
           orgs = ancient(rules.add_state_to_lookup.output)
    params:
        sizes = ORG_SIZES,
    # This can eat up a lot of memory which is a problem when running paralell.
    # Set a maximum, say 2.5-gb
    resources:
        mem_mb = 3000
    output: AGGREGATE_ORG_DISTANCES
    shell:
        "Rscript scripts/BuildAggregateDistanceFile.R --sizes {params.sizes} \
                 --flows {input.flows} --geo {input.geo} --emb {input.emb} \
                 --orgs {input.orgs} --out {output}"

rule get_aggregate_gravity_r2:
    input:
        [expand(rules.build_aggregate_org_distances.output,
                traj = TRAJECTORIES,
                dimensions = W2V_DIMENSIONS,
                window = W2V_WINDOW_SIZE)]
    threads: 4
    output: AGGREGATE_R2
    shell:
        # using default argument parsing here
        "Rscript scripts/GetAggregateGravityR2.R {input} {output}"

rule calculate_predicted_vs_actual:
    input: rules.build_aggregate_org_distances.output,
    output: PREDICTED_VS_ACTUAL,
    shell:
        "Rscript scripts/CalculatePredictedVsActual.R --input {input} \
        --output {output} --geo {wildcards.geo_constraint} \
        --distance {wildcards.distance}"

rule plot_gravity_relationship:
    input: rules.build_aggregate_org_distances.output
    output: GRAVITY_RELATIONSHIP_PLOT
    params:
        filterflag = lambda w: '--{}'.format(w.to_filter)
    shell:
        "Rscript scripts/PlotGravityLawRelationship.R --input {input} \
                 --output {output} --geo {wildcards.geo_constraint} \
                 --distance {wildcards.distance} {params.filterflag} --showcoef"

rule plot_predicted_vs_actual:
    input: rules.calculate_predicted_vs_actual.output
    output: PREDICTED_VS_ACTUAL_PLOT
    shell:
        "Rscript scripts/PlotPredictedVsActual.R --input {input} --output {output}"

rule plot_predicted_vs_actual_filtered:
    input: rules.calculate_predicted_vs_actual.output,
    output: PREDICTED_VS_ACTUAL_PLOT_FILT
    shell:
        "Rscript scripts/PlotPredictedVsActual.R --input {input} --output {output} \
        --geo {wildcards.geo_constraint_filt}"

rule plot_gradient_legend:
    output: GRADIENT_LEGEND
    shell:
        "Rscript scripts/PlotGradientLegend.R --output {output}"

## Misc data
rule generate_prestige_axis_org_codes:
    input: ORG_RANKINGS,
    output: PRESTIGE_AXIS_ORGS
    params:
        lookup = rules.add_state_to_lookup.output,
        regions = US_CENSUS_REGIONS
    run:
        if "times" in {wildcards.ranking}:
            shell("Rscript scripts/GeneratePrestigeAxisOrgCodes.R --input {input} --output {output} \
                   --variable total_score --regions {params.regions} --lookup {params.lookup} \
                   --norgs {wildcards.numorgs}")
        else:
            shell("Rscript scripts/GeneratePrestigeAxisOrgCodes.R --input {input} --output {output} \
                   --variable impact_frac_mncs --regions {params.regions} --lookup {params.lookup} \
                   --norgs {wildcards.numorgs}")

rule generate_usa_coasts_axis_org_codes:
    input: rules.add_state_to_lookup.output,
    output: COASTS_AXIS_ORGS
    shell:
        "Rscript scripts/GenerateGeographicAxisOrgCodes.R --input {input} \
        --scale region --place1 California --place2 Massachusetts \
        --norgs {wildcards.numorgs} --output {output}"

rule calculate_semaxis_prestige_projections:
    input:
        w2v = rules.train_word2vec_model.output,
        axis = rules.generate_prestige_axis_org_codes.output
    output: PRESTIGE_AXIS_PROJECTIONS
    shell:
        "python scripts/calculate_SemAxis_projections.py --input {input.w2v} \
        --axis {input.axis} --output {output}"

rule calculate_semaxis_geography_projections:
    input:
        w2v = rules.train_word2vec_model.output,
        axis = rules.generate_usa_coasts_axis_org_codes.output
    output: COASTS_AXIS_PROJECTIONS
    shell:
        "python scripts/calculate_SemAxis_projections.py --input {input.w2v} \
        --axis {input.axis} --output {output}"

rule generate_aggregate_prestige_rank_correlations:
    input:
        axes = [expand(rules.calculate_semaxis_prestige_projections.output,
                       traj = TRAJECTORIES,
                       dimensions = W2V_DIMENSIONS,
                       window = W2V_WINDOW_SIZE,
                       ranking = RANKINGS,
                       numorgs = NUMORGS)],
        lookup = ancient(rules.add_state_to_lookup.output)
    params:
        country = "USA",
        times = ORG_RANKINGS.format(ranking = "times"),
        leiden = ORG_RANKINGS.format(ranking = "leiden"),
    output: PRESTIGE_AGGREGATE_RANK_COR
    shell:
        "Rscript scripts/GetAggregatePrestigeAxisTests.R \
        {input.lookup} \'{params.country}\' {params.times} {params.leiden} \
        {input.axes} {output}"

## Plot semaxis
rule plot_1d_coasts_semaxis_projection:
    input:
        axis = rules.calculate_semaxis_geography_projections.output,
        lookup = rules.add_state_to_lookup.output
    output: SEMAXIS_1D_COASTS_PLOT
    shell:
        "Rscript scripts/Plot1DSemAxis.R --input {input.axis} --lookup {input.lookup} \
        --output {output} --country USA \
        --endlow California --endhigh Massachusetts \
        --place1 Arizona --place1code AZ --place2 Connecticut --place2code CT"

rule plot_1d_prestige_semaxis_projection:
    input:
        axis = rules.calculate_semaxis_prestige_projections.output,
        lookup = rules.add_state_to_lookup.output
    output: SEMAXIS_1D_PRESTIGE_PLOT
    shell:
        "Rscript scripts/Plot1DSemAxis.R --input {input.axis} --lookup {input.lookup} \
        --output {output} --country USA \
        --endlow Non-elite --endhigh Elite \
        --place1 Indiana --place1code IN --place2 Maryland --place2code MD"

rule plot_2d_semaxis_projection:
    input:
        axis1 = rules.calculate_semaxis_geography_projections.output,
        axis2 = rules.calculate_semaxis_prestige_projections.output,
        lookup = rules.add_state_to_lookup.output
    params:
        labels = ORG_SHORT_LABELS
    output: SEMAXIS_2D_COASTS_PRESTIGE_PLOT
    shell:
        "Rscript scripts/Plot2DSemAxis.R --axis1 {input.axis1} --axis2 {input.axis2} \
        --output {output} \
        --lookup {input.lookup} --labels {params.labels} --country USA \
        --endleft California --endright Massachusetts \
        --endbot Non-elite --endtop Elite"

## Descriptive plots
rule plot_pubs_over_time:
    input:
        flows = rules.format_trajectories.output,
        researchers = ancient(rules.get_researcher_metadata.output)
    output:
        PUBS_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPubsOverTime.R --input {input.flows} \
                 --researchers {input.researchers} --output {output}"

rule plot_prop_over_time:
    input:
        flows = rules.format_trajectories.output,
        researchers = ancient(rules.get_researcher_metadata.output)
    output:
        PROP_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPropOverTime.R --input {input.flows} \
                 --researchers {input.researchers} --output {output}"

rule plot_pubs_over_time_by_discipline:
    input: rules.format_trajectories.output
    output: PUBS_DISC_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPubsOverTimeByDiscipline.R --input {input} \
                 --output {output}"

rule plot_prop_over_time_by_discipline:
    input: rules.format_trajectories.output
    output: PROP_DISC_OVER_TIME_PLOT
    shell:
        "Rscript scripts/PlotPropOverTimeByDiscipline.R --input {input} \
                 --output {output}"

rule plot_num_affiliations_ecdf:
    input: ancient(rules.get_researcher_metadata.output)
    output: NUM_AFFILIATIONS_ECDF
    shell:
        "Rscript scripts/PlotMobilityECDF.R --input {input} \
                 --output {output}"

rule plot_prop_mobile_by_country:
    input:
        flows = rules.format_trajectories.output,
        nonmobile = rules.filter_to_nonmobile.output,
        researchers = rules.get_researcher_metadata.output,
        lookup = ancient(rules.add_state_to_lookup.output)
    output: PROP_MOBILE_BY_COUNTRY
    shell:
        "Rscript scripts/PlotProportionMobilityByCountry.R --flows {input.flows}\
                 --nonmobile {input.nonmobile} --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_org_country_mobility:
    input:
        flows = rules.format_trajectories.output,
        nonmobile = rules.filter_to_nonmobile.output,
        researchers = rules.get_researcher_metadata.output,
        lookup = ancient(rules.add_state_to_lookup.output)
    output: PROP_ORG_COUNTRY_MOBILITY
    shell:
        "Rscript scripts/PlotOrgCountryMobility.R --flows {input.flows}\
                 --nonmobile {input.nonmobile} --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_country_mobility_ecdf:
    input:
        flows = rules.format_trajectories.output,
        nonmobile = rules.filter_to_nonmobile.output,
        researchers = rules.get_researcher_metadata.output,
        lookup = ancient(rules.add_state_to_lookup.output)
    output: COUNTRY_MOBILITY_ECDF
    shell:
        "Rscript scripts/PlotCountryMobilityECDF.R --flows {input.flows}\
                 --nonmobile {input.nonmobile} --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_country_mobility_distribution:
    input:
        flows = ancient(rules.format_trajectories.output),
        nonmobile = rules.filter_to_nonmobile.output,
        researchers = ancient(rules.get_researcher_metadata.output),
        lookup = ancient(rules.add_state_to_lookup.output)
    output: COUNTRY_MOBILITY_DISTRIBUTION
    shell:
        "Rscript scripts/PlotCountryMobilityDistribution.R --flows {input.flows}\
                 --nonmobile {input.nonmobile} --researchers {input.researchers} --lookup {input.lookup} \
                 --output {output}"

rule plot_hyperparameter_performance:
    input:
        rules.get_aggregate_gravity_r2.output
    output: HYPERPARAMETER_PERFORMANCE
    shell:
        "Rscript scripts/PlotHyperparameterPerformance.R --input {input} --output {output}"
