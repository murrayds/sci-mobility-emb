from os.path import join as osjoin
import pandas as pd

# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'Data')
FIGURE_DIR = osjoin(PROJ_HOME, 'Figures')
RAW_DATA_DIR = osjoin(DATA_DIR, 'Raw')
ADDITIONAL_DATA_DIR = osjoin(DATA_DIR, 'Additional')
DERIVED_DATA_DIR = osjoin(DATA_DIR, 'Derived')
DESCRIPTIVE_DATA_DIR = osjoin(DATA_DIR, 'Descriptive')
SENTENCES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Sentences')
EMBEDDINGS_DIR = osjoin(DERIVED_DATA_DIR, 'Embeddings')
UMAP_FIGURE_DIR = osjoin(FIGURE_DIR, 'UMAP')

############
# Raw data #
############
MOBILITY_RAW = osjoin(RAW_DATA_DIR, '20191024_mobility_transitions.txt')
MOBILITY_RAW_YEARLY = osjoin(RAW_DATA_DIR, 'yearly', '{year}_raw_mobility.csv')
ORG_SIZES = osjoin(RAW_DATA_DIR, '2008-2019_inst_sizes.txt')
ORG_STATE_NAMES = osjoin(ADDITIONAL_DATA_DIR, 'org_states.csv')

######################
# Mobility sentences #
######################
MOBILITY_SENTENCES = osjoin(SENTENCES_DATA_DIR, '{year}_org_sentences.csv')

####################
# Descriptive Data #
####################
ORGANIZATION_FLOWS = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_flows.csv')
ORG_GEO_DISTANCE = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'organization_geographic_distance.csv')
AGGREGATE_ORG_DISTANCES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', 'aggregate_org_distances.csv')

##############
# Embeddings #
##############
WORD2VEC_EMBEDDINGS = osjoin(EMBEDDINGS_DIR, 'word2vec', '{period}_word2vec_d{dimensions}_model.bin')
ORG_W2V_SIMILARITIES = osjoin(DESCRIPTIVE_DATA_DIR, 'org', '{period}_word2vec_d{dimensions}_sim.csv')


##################
# Visualizations #
##################
UMAP_DATA = osjoin(UMAP_FIGURE_DIR, 'd{dimensions}', 'data', '{period}_umap_d{dimensions}_{metric}_neighbors{neighbors}_mindist{mindist}_data.csv')
UMAP_VISUALIZATIONS_ORG = osjoin(UMAP_FIGURE_DIR, 'd{dimensions}', '{period}_umap_d{dimensions}_{metric}_neighbors{neighbors}_mindist{mindist}_vis.{ext}')
GRAVITY_RELATIONSHIP_PLOT = osjoin(FIGURE_DIR, 'Gravity', 'gravity_relationship_{to_filter}_{withreg}.pdf')

##################
# Metadata files #
##################
ORG_SCALES = osjoin(ADDITIONAL_DATA_DIR, 'org_to_scales.txt')
ORG_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, '20191024_institution_lookup.txt')
ORG_FIXED_COORDINATES = osjoin(ADDITIONAL_DATA_DIR, 'fixed_org_coordinates.txt')
ORG_LOOKUP_FIXED = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_fixed.txt')
ORG_LOOKUP_WITH_STATES = osjoin(ADDITIONAL_DATA_DIR, 'institution_lookup_with_states.txt')
COUNTRY_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, 'iso_to_country.txt')

##############
# Parameters #
##############
ALL_YEARS = range(2008, 2019, 1)
PERIODS = ['2008-2013', '2014-2019']
FIG_EXTS = ['pdf', 'html']

# WORD2VEC parameters
W2V_DIMENSIONS = [50, 100, 150, 200]
W2V_WINDOW_SIZE = 20
W2V_MIN_WORD_FREQ = 50
W2V_NUM_WORKERS = 4
W2V_ITERATIONS = 10

# UMAP parameters
UMAP_METRICS = ['cosine', 'euclidean', 'correlation']
UMAP_NEIGHBORS = [5, 10, 15, 20]
UMAP_MIN_DIST = [0.0, 0.1, 0.25, 0.5]

# Gravity law parameters
TO_FILTER = ["filter", "nofilter"]
TO_PLOT_REG = ["reg", "noreg"]

def get_sentences_for_period(params):
    period_split = params.period.split("-")
    period_years = range(int(period_split[0]), int(period_split[1]) + 1, 1)
    return(expand(MOBILITY_SENTENCES, year = period_years))

###############################################################################
# TARGET RULE
###############################################################################
rule all:
    input:
        ORG_LOOKUP_FIXED,
        ORG_STATE_NAMES,
        ORG_LOOKUP_WITH_STATES,
        expand(WORD2VEC_EMBEDDINGS, period = PERIODS, dimensions = W2V_DIMENSIONS),
        ORGANIZATION_FLOWS,
        ORG_GEO_DISTANCE,
        expand(ORG_W2V_SIMILARITIES, dimensions = 200, period = '2014-2019'),
        AGGREGATE_ORG_DISTANCES,
        expand(UMAP_DATA,
               period = PERIODS,
               dimensions = W2V_DIMENSIONS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               mindist = UMAP_MIN_DIST),
        expand(UMAP_VISUALIZATIONS_ORG,
               dimensions = W2V_DIMENSIONS,
               period = PERIODS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               mindist = UMAP_MIN_DIST,
               ext = FIG_EXTS),
        expand(GRAVITY_RELATIONSHIP_PLOT, to_filter = TO_FILTER, withreg = TO_PLOT_REG)


rule fix_org_coordinates:
    input: ORG_LOOKUP
    params: fixed = ORG_FIXED_COORDINATES
    output: ORG_LOOKUP_FIXED
    shell:
        "Rscript scripts/FixOrgCoordinates.R --lookup {input} \
        --coordinates {params.fixed} --output {output}"

rule lookup_state_from_coords:
    input: rules.fix_org_coordinates.output
    output: ORG_STATE_NAMES
    shell:
        "python scripts/lookup_state_from_coords.py --input {input} --sleep 1.1 --output {output}"

rule add_state_to_lookup:
    input: rules.fix_org_coordinates.output
    params: states = rules.lookup_state_from_coords.output
    output: ORG_LOOKUP_WITH_STATES
    shell:
        "Rscript scripts/AddStatesToLookup.R --lookup {input} --output {output} \
                 --states {params.states}"

rule dissagregate_pubs_to_yearly:
    input: MOBILITY_RAW
    output: MOBILITY_RAW_YEARLY
    shell: "Rscript scripts/FilterRawMobilityToSingleYear.R {input} {wildcards.year} {output}"

rule pubs_to_sentences:
    input: rules.dissagregate_pubs_to_yearly.output
    output: MOBILITY_SENTENCES
    shell:
        "Rscript scripts/FormatPubsToSentences.R {input} org {output}"

rule train_word2vec_model:
    input: get_sentences_for_period
    output: WORD2VEC_EMBEDDINGS
    threads: W2V_NUM_WORKERS
    params:
        ws = W2V_WINDOW_SIZE,
        wf = W2V_MIN_WORD_FREQ,
        nw = W2V_NUM_WORKERS,
        niter = W2V_ITERATIONS
    shell:
        "python scripts/train_word2vec_embedding_from_sentences.py --files {input} \
                --dimensions {wildcards.dimensions} --window {params.ws} \
                --minfrequency {params.wf} --numworkers {params.nw} \
                --iterations {params.niter} --output {output}"

rule dimreduce_umap:
    input: rules.train_word2vec_model.output
    output: UMAP_DATA
    shell:
        'python scripts/dimreduce_with_umap.py --model {input} \
                --metric {wildcards.metric} --neighbors {wildcards.neighbors} \
                --mindistance {wildcards.mindist} --output {output}'

rule plot_umap_org:
    input: rules.dimreduce_umap.output
    params:
        orgs = rules.add_state_to_lookup.output,
        countries = COUNTRY_LOOKUP
    output: UMAP_VISUALIZATIONS_ORG
    shell:
        "Rscript scripts/PlotOrgDimReducedEmbedding.R {input} {params.orgs} \
        {params.countries} {output}"

rule calculate_org_flows:
    input: MOBILITY_RAW
    output: ORGANIZATION_FLOWS
    shell:
        "python scripts/calculate_org_flows.py --input {input} --output {output}"

rule calculate_org_geographic_distance:
    input: rules.add_state_to_lookup.output
    output: ORG_GEO_DISTANCE
    shell:
        "python scripts/calculate_org_geo_distance.py --input {input} --output {output}"

rule calculate_org_w2v_similarities:
    input: rules.train_word2vec_model.output
    output: ORG_W2V_SIMILARITIES
    shell:
        "python scripts/calculate_org_w2v_similarity.py --model {input} --output {output}"

rule build_aggregate_org_distances:
    input: flows = rules.calculate_org_flows.output,
           geo = rules.calculate_org_geographic_distance.output,
           emb = expand(rules.calculate_org_w2v_similarities.output,
                        dimensions = 200, period = "2014-2019")
    params:
        sizes = ORG_SIZES,
        orgs = rules.add_state_to_lookup.output
    output: AGGREGATE_ORG_DISTANCES
    shell:
        "Rscript scripts/BuildAggregateDistanceFile.R --sizes {params.sizes} \
                 --flows {input.flows} --geo {input.geo} --emb {input.emb} \
                 --orgs {params.orgs} --out {output}"

rule plot_gravity_relationship:
    input: rules.build_aggregate_org_distances.output
    output: GRAVITY_RELATIONSHIP_PLOT
    params:
        filterflag = lambda w: '--{}'.format(w.to_filter),
        regflag = lambda w: '--{}'.format(w.withreg)
    shell:
        "Rscript scripts/PlotGravityLawRelationship.R --input {input} \
                 --output {output} {params.filterflag} {params.regflag}"
