from os.path import join as osjoin
import pandas as pd

# store the local path to the dropbox folder in the 'PROJ_HOME_DIR' file.
PROJ_HOME = open('PROJ_HOME_DIR').read().strip()
DATA_DIR = osjoin(PROJ_HOME, 'Data')
FIGURE_DIR = osjoin(PROJ_HOME, 'Figures')
RAW_DATA_DIR = osjoin(DATA_DIR, 'Raw')
ADDITIONAL_DATA_DIR = osjoin(DATA_DIR, 'Additional')
DERIVED_DATA_DIR = osjoin(DATA_DIR, 'Derived')
SCALES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Scales')
SENTENCES_DATA_DIR = osjoin(DERIVED_DATA_DIR, 'Sentences')
EMBEDDINGS_DIR = osjoin(DERIVED_DATA_DIR, 'Embeddings')
PARAM_DIR = osjoin('Model_Params')
UMAP_FIGURE_DIR = osjoin(FIGURE_DIR, 'UMAP')

############
# Raw data #
############
MOBILITY_RAW = osjoin(RAW_DATA_DIR, '20191024_mobility_transitions.txt')
MOBILITY_RAW_YEARLY = osjoin(RAW_DATA_DIR, 'yearly', '{year}_raw_mobility.csv')
MOBILITY_RAW_YEARLY_MULTISCALE = osjoin(SCALES_DATA_DIR, '{scale}', '{year}_{scale}_mobility.csv')

######################
# Mobility sentences #
######################
MOBILITY_SENTENCES = osjoin(SENTENCES_DATA_DIR, '{scale}', '{year}_org_sentences.csv')

##############
# Embeddings #
##############
WORD2VEC_EMBEDDINGS = osjoin(EMBEDDINGS_DIR, 'word2vec', '{scale}_{period}_word2vec_model.bin')
WORD2VEC_PARAMS = osjoin(PARAM_DIR, '{scale}_word2vec_params.json')

##################
# Visualizations #
##################
UMAP_DATA = osjoin(UMAP_FIGURE_DIR, 'data', '{scale}_{period}_umap_{metric}_neighbors{neighbors}_mindist{mindist}.csv')
UMAP_VISUALIZATIONS_ORG = osjoin(UMAP_FIGURE_DIR, 'org', 'org_{period}_umap_{metric}_neighbors{neighbors}_mindist{mindist}.{ext}')
UMAP_VISUALIZATIONS_CITY = osjoin(UMAP_FIGURE_DIR, 'city', 'city_{period}_umap_{metric}_neighbors{neighbors}_mindist{mindist}.{ext}')
UMAP_VISUALIZATIONS_COUNTRY = osjoin(UMAP_FIGURE_DIR, 'country', 'country_{period}_umap_{metric}_neighbors{neighbors}_mindist{mindist}.{ext}')

##################
# Metadata files #
##################
ORG_SCALES = osjoin(ADDITIONAL_DATA_DIR, 'org_to_scales.txt')
ORG_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, '20191024_institution_lookup.txt')
COUNTRY_LOOKUP = osjoin(ADDITIONAL_DATA_DIR, 'iso_to_country.txt')

##############
# Parameters #
##############
ALL_YEARS = range(2008, 2019, 1)
PERIODS = ['2008-2013', '2014-2019']
SCALES = ['org', 'city', 'country']
FIG_EXTS = ['.pdf', '.html']

# UMAP parameters
UMAP_METRICS = ['cosine', 'euclidean', 'correlation']
UMAP_NEIGHBORS = [5, 10, 15, 20, 25]
UMAP_MIN_DIST = ['0.1', '0.2', '0.3']

def get_sentences_for_period(params):
    period_split = params.period.split("-")
    period_years = range(int(period_split[0]), int(period_split[1]) + 1, 1)
    return(expand(MOBILITY_SENTENCES, year = period_years, scale = params.scale))

###############################################################################
# TARGET RULE
###############################################################################
rule all:
    input:
        expand(MOBILITY_RAW_YEARLY, year = ALL_YEARS),
        expand(MOBILITY_RAW_YEARLY_MULTISCALE, year = ALL_YEARS, scale = SCALES),
        expand(MOBILITY_SENTENCES, year = ALL_YEARS, scale = SCALES),
        expand(WORD2VEC_EMBEDDINGS, period = PERIODS, scale = SCALES),
        expand(UMAP_DATA,
               period = PERIODS,
               scale = SCALES,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               mindist = UMAP_MIN_DIST),
        expand(UMAP_VISUALIZATIONS_ORG,
               period = PERIODS,
               metric = UMAP_METRICS,
               neighbors = UMAP_NEIGHBORS,
               mindist = UMAP_MIN_DIST,
               ext = FIG_EXTS)
        #expand(UMAP_VISUALIZATIONS_CITY, period = PERIODS, ext = FIG_EXTS),
        #expand(UMAP_VISUALIZATIONS_COUNTRY, period = PERIODS, ext = FIG_EXTS)


rule dissagregate_pubs_to_yearly:
    input: MOBILITY_RAW
    output: MOBILITY_RAW_YEARLY
    shell: "Rscript scripts/FilterRawMobilityToSingleYear.R {input} {wildcards.year} {output}"

rule add_scales_to_yearly_pubs:
    input: rules.dissagregate_pubs_to_yearly.output, ORG_SCALES
    output: MOBILITY_RAW_YEARLY_MULTISCALE
    shell:
        "Rscript scripts/AddMultiscaleInfoToMobility.R {input} {wildcards.scale} {output}"

rule pubs_to_sentences:
    input: rules.add_scales_to_yearly_pubs.output
    output: MOBILITY_SENTENCES
    shell:
        "Rscript scripts/FormatPubsToSentences.R {input} {wildcards.scale} {output}"

rule train_word2vec_model:
    input: get_sentences_for_period
    params: WORD2VEC_PARAMS
    output: WORD2VEC_EMBEDDINGS
    shell:
        "python scripts/train_word2vec_embedding_from_sentences.py {input} {params} {output}"

rule dimreduce_umap:
    input: rules.train_word2vec_model.output
    output: UMAP_DATA
    shell:
        'python scripts/dimreduce_with_umap.py --model {input} \
                --metric {wildcards.metric} --neighbors {wildcards.neighbors} \
                --mindistance {wildcards.mindist} --output {output}'

rule plot_umap_org:
    input: UMAP_DATA.format(scale = 'org', period = '{period}', metric = '{metric}', neighbors = '{neighbors}', mindist = '{mindist}')
    params: ORG_LOOKUP, COUNTRY_LOOKUP
    output: UMAP_VISUALIZATIONS_ORG
    shell:
        "Rscript scripts/PlotOrgDimReducedEmbedding.R {input} {params} {output}"

# rule plot_umap_city:
#     input: UMAP_DATA.format(scale = 'city', period = '{period}')
#     params: ORG_LOOKUP, COUNTRY_LOOKUP
#     output: UMAP_VISUALIZATIONS_CITY
#     shell:
#         "Rscript scripts/PlotCityDimReducedEmbedding.R {input} {params} {output}"
#
# rule plot_umap_country:
#     input: UMAP_DATA.format(scale = 'country', period = '{period}')
#     params: COUNTRY_LOOKUP
#     output: UMAP_VISUALIZATIONS_COUNTRY
#     shell:
#         "Rscript scripts/PlotCountryDimReducedEmbedding.R {input} {params} {output}"
